#include <iostream>
#include "sqlite3.h"
#include <string>
#include <cstdlib>
using namespace std;

sqlite3* db;


void addCuidador(const string& nombre, const string& usuario, const string& contrasenha, const string& codigo);
void addPaciente(const string& nombre, const string& usuario, const string& contrasenha, const string& codigo);
void handleError(int rc, char* errMsg);
void ShowMenu();
void Register();
void Login();
bool CheckSpacesAndSize(string Data);
bool CheckSpacesAndSizeName(string Data);
bool readPacientes(const string& LoginUser, const string& LoginPass);
string GenerateNewUserCode(string Name,string PhoneN);

int main() {
    int option;
    //abrir tabla
    int rc = sqlite3_open("mi_base_de_datos.db", &db);
    if (rc) {
        cerr << "No se puede abrir la base de datos: " << sqlite3_errmsg(db) << endl;
        return rc;
    }
    else {
        cout << "Base de datos abierta correctamente." << endl;
    }

    // Crear las tablas
    const char* sqlCreatePacientes = "CREATE TABLE IF NOT EXISTS Pacientes (" \
        "NOMBRE TEXT NOT NULL," \
        "USUARIO TEXT NOT NULL," \
        "CONTRASENHA TEXT NOT NULL," \
        "CODIGO TEXT NOT NULL);";

    const char* sqlCreateCuidadores = "CREATE TABLE IF NOT EXISTS Cuidadores (" \
        "NOMBRE TEXT NOT NULL," \
        "USUARIO TEXT NOT NULL," \
        "CONTRASENHA TEXT NOT NULL," \
        "CODIGO TEXT NOT NULL);";

    char* errMsg = 0;
    rc = sqlite3_exec(db, sqlCreatePacientes, 0, 0, &errMsg);
    handleError(rc, errMsg);
    rc = sqlite3_exec(db, sqlCreateCuidadores, 0, 0, &errMsg);
    handleError(rc, errMsg);
    do {

        ShowMenu();
        cin >> option;
        cin.ignore();
        system("cls");
        switch (option)
        {
        case 1:
            Register();
            break;
        case 2:
            Login();
            break;
        case 0:
            cout << "Saliendo";
            break;
        default:
            cout << "Opcion no permitida";
            break;
        }
    } while (option != 0);
}

//Menu de inicio
void ShowMenu() {
    cout << "\tHealth-Grand\t" << endl;
    cout << "\tRegister\t" << endl;
    cout << "\tLogin\t" << endl;
    cout << "\t\t\t" << endl;
}

//Menu de Registro
void Register() {
    string Name,PhoneNum,Pass,UserCode;
    bool SpacesAndSize;
    int TypeOfAccount;
    do {
        cout << "\tHealth-Grand\t" << endl;
        cout << "\tEscoja una opcion\t" << endl;
        cout << "\t1.Cuenta de paciente\t" << endl;
        cout << "\t2.Cuenta de cuidador\t" << endl;
        cin >> TypeOfAccount;
        cin.ignore();
    } while (TypeOfAccount < 1 || TypeOfAccount>2);
    do {
        cout << "\tIngrese su nombre completo\t" << endl;
        getline(cin, Name);
        SpacesAndSize = CheckSpacesAndSizeName(Name);
    } while (SpacesAndSize != false);
    do {
        cout << "\tNumero de telefono\t" << endl;
        getline(cin, PhoneNum);
        SpacesAndSize = CheckSpacesAndSize(PhoneNum);
    } while (SpacesAndSize != false);
    do {
        cout << "\tContrasenha\t" << endl;
        getline(cin, Pass);
        SpacesAndSize = CheckSpacesAndSize(Pass);
    } while (SpacesAndSize != false);
    UserCode=GenerateNewUserCode(Name,PhoneNum);
    switch (TypeOfAccount)
    {
    case 1:
        addPaciente(Name, PhoneNum, Pass, UserCode);
        break;
    case 2:
        addCuidador(Name, PhoneNum, Pass, UserCode);
        break;
    default:
        break;
    }
}

//Menu de login
void Login() {
    string User, Pass, Data;
    int TypeOfAccount;
    bool UserExist;
    do {
        cout << "\tHealth-Grand\t" << endl;
        cout << "\tEscoja una opcion\t" << endl;
        cout << "\t1.Ingresar como paciente\t" << endl;
        cout << "\t2.Ingresar como cuidador\t" << endl;
        cin >> TypeOfAccount;
        cin.ignore();
    } while (TypeOfAccount < 1 || TypeOfAccount>2);
    do {
        cout << "\tIngrese su numero de telefono\t" << endl;
        getline(cin, User);
        cout << "\tIngrese su contrasenha\t" << endl;
        getline(cin, Pass);
        UserExist = readPacientes(User, Pass);
    } while (UserExist != true);
}

//Verificar espacios
bool CheckSpacesAndSize(string Data) {
    int Size;
    char Letter;
    if (Data.empty())
        return true;
    Size = Data.length();
    if (Size < 9) {
        cout << "Debe tener mas de 8 digitos";
        return true;
    }
    if (Data.at(0) == ' ' || Data.at(Size - 1) == ' '){
        cout << "Debe tener mas de 8 digitos" << endl;
        return true;
    }
    for (int i = 0;i < Size;i++) {
        Letter = Data.at(i);
        if (Letter == ' ') {
            cout << "Porfavor no utilize espacios" << endl;
            return true;
        }
    }
    return false;
}

//verificar 1 espacio solamente
bool CheckSpacesAndSizeName(string Data) {
    int Size;
    char Letter1,Letter2;
    if (Data.empty()==1)
        return true;
    Size = Data.length();
    if (Size < 9) {
        cout << "Debe tener mas de 8 digitos"<<endl;
        return true;
    }
    if (Data.at(0) == ' ' || Data.at(Size - 1) == ' ') {
        cout << "no puede tener espacios ni al inicio ni al final" << endl;
        return true;
    }
    for (int i = 0;i < Size-1;i++) {
        Letter1 = Data.at(i);
        Letter2 = Data.at(i+1);
        if (Letter1 == ' ' && Letter2 == ' ') {
            cout << "Porfavor solo utilize un espacio para separar los nombres" << endl;
            return true;
        }
    }
    return false;
}

//Mensaje de error sql
void handleError(int rc, char* errMsg) {
    if (rc != SQLITE_OK) {
        cerr << "Error: " << errMsg << endl;
        sqlite3_free(errMsg);
    }
}

//Funcion para anhadir un nuevo paciente
void addPaciente(const string& nombre, const string& usuario, const string& contrasenha, const string& codigo) {
    string sql = "INSERT INTO Pacientes (NOMBRE, USUARIO, CONTRASENHA, CODIGO) VALUES ('" +
        nombre + "', '" + usuario + "', '" + contrasenha + "', '" + codigo + "');";

    char* errMsg = 0;
    int rc = sqlite3_exec(db, sql.c_str(), 0, 0, &errMsg);
    handleError(rc, errMsg);
}

//Funcion para anhadir un nuevo cuidador
void addCuidador(const string& nombre, const string& usuario, const string& contrasenha, const string& codigo) {
    string sql = "INSERT INTO Cuidadores (NOMBRE, USUARIO, CONTRASENHA, CODIGO) VALUES ('" +
        nombre + "', '" + usuario + "', '" + contrasenha + "', '" + codigo + "');";

    char* errMsg = 0;
    int rc = sqlite3_exec(db, sql.c_str(), 0, 0, &errMsg);
    handleError(rc, errMsg);
}

//Generar codigo de usuario
string GenerateNewUserCode(string Name, string PhoneN){
    string UserCode;
    char Letter;
    for (int i = 0;i < 3;i++) {
        Letter = Name.at(i);
        Letter = toupper(Letter);
        UserCode += Letter;
        Letter = PhoneN.at(i);
        UserCode += Letter;
    }
    return UserCode;
}

//Leer la base datos y comparar si es correcto las credenciales
bool readPacientes(const string& LoginUser , const string& LoginPass) {
    const char* sql = "SELECT * FROM Pacientes;";
    sqlite3_stmt* stmt;

    // Prepare the SQL statement
    int rc = sqlite3_prepare_v2(db, sql, -1, &stmt, nullptr);
    if (rc != SQLITE_OK) {
        cerr << "Failed to prepare statement: " << sqlite3_errmsg(db) << endl;
        return false;
    }

    bool userFound = false;

    // Execute the statement and check the results
    while (sqlite3_step(stmt) == SQLITE_ROW) {
        const unsigned char* NameBase = sqlite3_column_text(stmt, 0);
        const unsigned char* UserBase = sqlite3_column_text(stmt, 1);
        const unsigned char* PassBase = sqlite3_column_text(stmt, 2);
        
        string User = reinterpret_cast<const char*>(UserBase);
        string Pass = reinterpret_cast<const char*>(PassBase);

        // Check if the user exists
        if (LoginUser  == User) {
            userFound = true; // User exists
            // Check if the password matches
            if (LoginPass == Pass) {
                cout << "Bienvenido " << NameBase << endl;
                sqlite3_finalize(stmt);
                return true; // Successful login
            } else {
                cout << "contra incorrecto" << endl;
                sqlite3_finalize(stmt);
                return false; // Incorrect password
            }
        }
    }

    // If the user was not found
    if (!userFound) {
        cout << "usuario incorrecto" << endl;
    }

    // Finalize the statement
    sqlite3_finalize(stmt);
    return false; // Failed login
}

